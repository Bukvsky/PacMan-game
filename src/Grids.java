import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class Grids {
    //private static final int ROWS = 21;
   // private static final int COLS = 19;
    private static BufferedImage image;
    public static  int[][] defaultgrid = {
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1},
            {1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1},
            {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            {1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1},
            {1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1},
            {1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1},
            {0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0},
            {1,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,1,1,1},
            {0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0},
            {1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1},
            {0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0},
            {1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1},
            {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1},
            {1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1},
            {1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1},
            {1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1},
            {1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1},
            {1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1},
            {1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    };
    public static  char[][] grid ={

            {'G','D','D','D','D','D','D','D','D','D','D','M','D','D','D','M','D','D','D','D','D','D','D','D','D','D','C'},
            {'J','P','P','P','P','P','P','P','P','P','P','N','P','P','P','N','P','P','P','P','P','P','P','P','P','P','J'},
            {'J','P','I','D','F','P','G','D','D','F','P','P','P','B','P','P','P','I','D','D','C','P','I','D','F','P','J'},
            {'J','P','P','P','P','P','J','P','P','P','P','B','P','J','P','B','P','P','P','P','J','P','P','P','P','P','J'},
            {'L','D','D','D','C','P','N','P','B','P','G','K','P','N','P','L','C','P','B','P','N','P','G','D','D','D','K'},
            {'P','P','P','P','J','P','P','P','J','P','N','P','P','P','P','P','N','P','J','P','P','P','J','P','P','P','P'},
            {'G','D','F','P','N','P','O','P','N','P','P','P','B','P','B','P','P','P','N','P','O','P','N','P','I','D','C'},
            {'J','P','P','P','P','P','P','P','P','I','M','D','A','D','A','D','M','F','P','P','P','P','P','P','P','P','J'},
            {'J','P','B','P','I','C','P','B','P','P','J','P','P','P','P','P','J','P','P','B','P','G','F','P','B','P','J'},
            {'J','P','J','P','P','J','P','E','F','P','N','P','O','P','O','P','N','P','I','H','P','J','P','P','J','P','J'},
            {'J','P','L','F','P','N','P','N','P','P','P','P','P','P','P','P','P','P','P','N','P','N','P','I','K','P','J'},
            {'J','P','P','P','P','P','P','P','P','G','F','P','O','P','O','P','I','C','P','P','P','P','P','P','P','P','J'},
            {'L','D','D','F','P','I','D','C','P','J','P','P','P','P','P','P','P','J','P','G','D','F','P','I','D','D','K'},
            {'P','P','P','P','P','P','P','N','P','N','P','G','F','Q','I','C','P','N','P','N','P','P','P','P','P','P','P'},
            {'G','D','F','P','P','O','P','P','P','P','P','J','P','P','P','J','P','P','P','P','P','O','P','P','I','D','C'},
            {'J','P','P','P','P','P','P','I','D','C','P','L','D','D','D','K','P','G','D','F','P','P','P','P','P','P','J'},
            {'J','P','B','P','I','C','P','P','P','N','P','P','P','P','P','P','P','N','P','P','P','G','F','P','B','P','J'},
            {'J','P','J','P','P','J','P','B','P','P','P','B','P','O','P','B','P','P','P','B','P','J','P','P','J','P','J'},
            {'J','P','L','F','P','N','P','L','D','C','P','J','P','P','P','J','P','G','D','K','P','N','P','I','K','P','J'},
            {'J','P','P','P','P','P','P','P','P','N','P','E','F','P','I','H','P','N','P','P','P','P','P','P','P','P','J'},
            {'J','P','I','D','D','F','P','O','P','P','P','J','P','P','P','J','P','P','P','O','P','I','D','D','F','P','J'},
            {'J','P','P','P','P','P','P','P','P','B','P','J','P','B','P','J','P','B','P','P','P','P','P','P','P','P','J'},
            {'J','P','O','P','I','C','P','I','D','K','P','N','P','J','P','N','P','L','D','F','P','G','F','P','O','P','J'},
            {'J','P','P','P','P','J','P','P','P','P','P','P','P','J','P','P','P','P','P','P','P','J','P','P','P','P','J'},
            {'J','P','I','F','P','L','F','P','I','F','P','I','D','A','D','F','P','I','F','P','I','K','P','I','F','P','J'},
            {'J','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','J'},
            {'L','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','D','K'}

    };
    public static int[][] gridBin = {
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},
            {1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1},
            {1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1},
            {1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,1},
            {0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0},
            {1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,1},
            {1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1},
            {1,0,1,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1},
            {1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1},
            {1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1},
            {1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1},
            {1,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1},
            {0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0},
            {1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1},
            {1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1},
            {1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,1},
            {1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,1,0,1},
            {1,0,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1},
            {1,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,1},
            {1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,1},
            {1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1},
            {1,0,1,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1},
            {1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1},
            {1,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1},
            {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} //x=14 y = 12

    };


    public static char recognizeDot(int x, int y){
        return grid[x][y];

    }
    public static boolean recognizeDots(int x, int y){
        return defaultgrid[x][y]==1;

    }
    public static void binToChars(int[][] Arr){

    }

    public static void main(String[] args) {
        System.out.println(grid.length);
        System.out.println(grid[0].length);
    }

    public static int[] pathCords(){
        int[] arr = new int[2];
        int x = gridBin.length %2 ==0? (gridBin.length+1)/2: gridBin.length;
        for(int i = x; i< gridBin.length;i++){
            for(int j = 1; j< gridBin[i].length;j++){
                if(gridBin[i][j] == 1){
                    arr[0] = i;
                    arr[1] = j;
                    return arr;
                }
            }
        }
        return arr;
    }
}
